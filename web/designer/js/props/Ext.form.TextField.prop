{
properties : [{
    name : "allowBlank",
    type : "boolean",
    desc : "<b>Boolean</b> False to validate that the value length > 0 (defaults to true)"
  },{
    name : "blankText",
    desc : "<b>String</b> Error text to display if the allow blank validation fails (defaults to \"This field is required\")"
  },{
    name : "disableKeyFilter",
    type : "boolean",
    desc : "<b>Boolean</b> True to disable input keystroke filtering (defaults to false)"
  },{
    name : "emptyClass",
    desc : "<b>String</b> The CSS class to apply to an empty field to style the {@link #emptyText} (defaults to 'x-form-empty-field'). This class is automatically added and removed as needed depending on the current field value."
  },{
    name : "emptyText",
    desc : "<b>String</b> The text to display in the view when there is no data to display (defaults to '')."
  },{
    name : "enableKeyEvents",
    type : "boolean",
    desc : "<b>Boolean</b> true to enable the proxying of key events for the HTML input field (defaults to false)"
  },{
    name : "grow",
    type : "boolean",
    desc : "<b>Boolean</b> True if this field should automatically grow and shrink to its content"
  },{
    name : "growMax",
    type : "number",
    desc : "<b>Number</b> The maximum height to allow when grow = true (defaults to 1000)"
  },{
    name : "growMin",
    type : "number",
    desc : "<b>Number</b> The minimum height to allow when grow = true (defaults to 60)"
  },{
    name : "maskRe",
    type : "regexp",
    desc : "<b>RegExp</b> An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)"
  },{
    name : "maxLength",
    type : "number",
    desc : "<b>Number</b> Maximum input field length allowed (defaults to Number.MAX_VALUE)"
  },{
    name : "maxLengthText",
    desc : "<b>String</b> Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")"
  },{
    name : "minLength",
    type : "number",
    desc : "<b>Number</b> Minimum input field length required (defaults to 0)"
  },{
    name : "minLengthText",
    desc : "<b>String</b> Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")"
  },{
    name : "regex",
    type : "regexp",
    desc : "<b>RegExp</b> A JavaScript RegExp object to be tested against the field value during validation (defaults to null). If available, this regex will be evaluated only after the basic validators all return true, and will be passed the current field value. If the test fails, the field will be marked invalid using {@link #regexText}."
  },{
    name : "regexText",
    desc : "<b>String</b> The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")"
  },{
    name : "selectOnFocus",
    type : "boolean",
    desc : "<b>Boolean</b> True to select any existing text in the field immediately on focus. Only applies when editable = true (defaults to false)"
  },{
    name : "stripCharsRe",
    type : "regexp",
    desc : "<b>RegExp</b> A JavaScript RegExp object used to strip unwanted content from the value before validation (defaults to null)."
  },{
    name : "validator",
    type : "function",
    desc : "<b>Function</b> A custom validation function to be called during field validation (defaults to null). If available, this function will be called only after the basic validators all return true, and will be passed the current field value and expected to return boolean true if the value is valid or a string error message if invalid."
  },{
    name : "vtype",
    desc : "<b>String</b> A validation type name as defined in {@link Ext.form.VTypes} (defaults to null)",
    values : ["alpha","alphanum","email","url","dateRange","valEqual","upperCase","lowerCase"]
  },{
    name : "vtypeText",
    desc : "<b>String</b> A custom error message to display in place of the default message provided for the vtype currently set for this field (defaults to '')."
  }]
}